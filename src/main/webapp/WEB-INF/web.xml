<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <display-name>Archetype Created Web Application</display-name>
  
  
  
  	<listener><!-- 사실 지금 예제에서는 구동이 안된다, 이유는 bean-config.xml을 통해 인스턴스가 생성되고 handler-config.xml이 실행되야하는데 여기 listener태그가 실행되면-->
  			  <!-- bean-config.xml을 통해 인스턴스가 생성되기도 전에 handler-config.xml이 실행되므로 제대로 실행이 안된다. 즉, 원래는 된다. -->
  		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  	</listener>
  
  
  
  <!-- dispatcher를 여러개로 설정할수 있다 주로 큰프로젝트를 만들때 사용한다. -->
    <servlet>
		<servlet-name>dispatcher3</servlet-name><!--기본적으로  dispatcher-servlet.xml 이름으로 설정파일을 만들어야한다. 이건 약속이기때문에 지켜야한다. 그리고 web.xml과 같은 경로에 파일을 만들어야한다. -->
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class><!-- 중앙에서 중심으로 제어역할을 함 -->
	<init-param><!--만약 다른이름과 다른폴더로 사용하고 싶으면 이걸 사용하면됨 -->
		<param-name>contextConfigLocation</param-name><!--contextConfigLocation 이건 약속 -->
		<param-value>
		/WEB-INF/conf/handler-config.xml <!-- 이렇게 나누면 handler와 bean, view를 각각 서로 따로따로 관리하며 사용할수있다. 관리만 따로 관리가 되는것이므로 돌아갈때는 같이 돌아간다.  -->
		/WEB-INF/conf/bean-config.xml
		/WEB-INF/conf/view-config.xml
		</param-value><!-- 이제 이경로로 xml파일을 찾으러 간다. 그러므로 경로에 파일을 만들어줘야한다.  -->
	</init-param>
	</servlet>
	
	<servlet>
	<servlet-name>webservice1</servlet-name>
	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	</servlet>
	
	
	
	
	
	<servlet-mapping>
		<servlet-name>dispatcher3</servlet-name>
		<url-pattern>*.action</url-pattern>
	</servlet-mapping>
	
	<servlet-mapping>
		<servlet-name>webservice1</servlet-name>
		<url-pattern>*.service</url-pattern>
	</servlet-mapping>
	
	
	
	
	
	
	
	
	
	
	


</web-app>
